# php函数或语言结构

# ------------------------------------------------------
#                   未分类
# ------------------------------------------------------
snippet define "定义常量(常量,值,大小写不敏感)" b
define('${1}', $2${3:, ${4:false}});
endsnippet

snippet var_dump "显示变量"
var_dump(${1});
endsnippet

# ------------------------------------------------------
#                   字符串string
# ------------------------------------------------------
snippet echo "输出一个以上字符串"
echo "$1";
endsnippet

snippet print "输出一个字符串"
print "$1";
endsnippet

snippet addslashes "返回在预定义字符(单引号,双引号,反斜杠,NULL)之前添加反斜杠的字符串"
addslashes($1)
endsnippet

snippet stripslashes "删除由 addslashes() 函数添加的反斜杠"
stripslashes($1)
endsnippet

snippet hex2bin "把十六进制值的字符串转换为 ASCII 字符"
hex2bin(${1:/* 2n number string */})
endsnippet

snippet bin2hex "把 ASCII 字符的字符串转换为十六进制值"
bin2hex(${1:/* string */})
endsnippet

snippet chr "从指定的 ASCII 值返回字符"
chr(${1:/* ascii */})
endsnippet

snippet crc32 "计算字符串的 32 位 CRC（循环冗余校验）"
crc32(${1:/* string */})
endsnippet

# ------------------------------------------------------
snippet explode "把字符串打散为数组"
explode('${1: }', ${2:"string"}${3:, limit})
endsnippet
snippet implode "返回由数组元素组合成的字符串"
implode('${1:separator}', ${2:array})
endsnippet

# ------------------------------------------------------
snippet htmlentities "把字符转换为 HTML 实体"
htmlentities(${1:string})
endsnippet
snippet html_entity_decode "把 HTML 实体转换为字符"
html_entity_decode(${1:string})
endsnippet

snippet htmlspecialchars "把预定义的字符(和号,单双引号,大小于号)转换为 HTML 实体"
htmlspecialchars(${1:string})
endsnippet
snippet htmlspecialchars_decode "把预定义的 HTML 实体转换为字符"
htmlspecialchars_decode(${1:string})
endsnippet

snippet strip_tags "剥去字符串中的 HTML、XML 以及 PHP 的标签"
strip_tags(${1:string})
endsnippet

# ------------------------------------------------------
snippet strtolower "把字符串转换为小写"
strtolower(${1:string})
endsnippet
snippet strtoupper "把字符串转换为大写"
strtoupper(${1:string})
endsnippet
snippet ucfirst "把字符串中的首字符转换为大写"
ucfirst(${1:string})
endsnippet
snippet lcfirst "把字符串中的首字符转换为小写"
lcfirst(${1:string})
endsnippet
snippet ucwords "把每个单词的首字符转换为大写"
ucwords(${1:string})
endsnippet

# ------------------------------------------------------
snippet trim "移除字符串两侧的空白字符或其他预定义字符"
trim(${1}${2:, charlist})
endsnippet

snippet ltrim "移除字符串左侧的空白字符或其他预定义字符"
ltrim(${1}${2:, charlist})
endsnippet

snippet rtrim "移除字符串右侧的空白字符或其他预定义字符"
rtrim(${1}${2:, charlist})
endsnippet

# ------------------------------------------------------
snippet sha1 "计算字符串的 SHA-1 散列"
sha1(${1})
endsnippet

snippet sha1_file "计算文件的 SHA-1 散列"
sha1_file(${1})
endsnippet

# ------------------------------------------------------
snippet printf "输出格式化的字符串"
printf("${1:format}", ${2:args})
endsnippet

snippet sprintf "把格式化的字符串写入变量中"
sprintf("${1:format}", ${2:args})
endsnippet

snippet vprintf "输出格式化的字符串,参数为数组"
vprintf("${1:format}", ${2:array})
endsnippet

snippet vsprintf "把格式化的字符串写入变量中,参数为数组"
vsprintf("${1:format}", ${2:array})
endsnippet

snippet fprintf "把格式化的字符串写入指定的输出流"
fprintf(${1:stream}, "${2:format}", ${3:args})
endsnippet

snippet vfprintf "把格式化的字符串写入指定的输出流,参数为数组"
vfprintf(${1:stream}, "${2:format}", ${3:array})
endsnippet

# ------------------------------------------------------
snippet str_getcsv "解析 CSV 格式字段的字符串，并返回包含所读取字段的数组"
# str_getcsv(string,分割符,包裹字符,转义字符)
str_getcsv(${1:string})
endsnippet

# ------------------------------------------------------
snippet str_replace "以其他字符替换字符串中的一些字符（区分大小写）"
str_replace("${1:find}", "${2:replace}", ${3:string}${4:, $count})
endsnippet

snippet str_ireplace "以其他字符替换字符串中的一些字符（不区分大小写）"
str_ireplace("${1:find}", "${2:replace}", ${3:string}${4:, $count})
endsnippet

snippet str_repeat "把字符串重复指定的次数"
str_repeat("${1:string}", ${2:repeat})
endsnippet

snippet str_pad "把字符串填充为新的长度"
str_pad("${1:string}", ${2:length}, "${3: }")
endsnippet

snippet str_shuffle "随机打乱字符串中的所有字符"
str_shuffle(${1:string})
endsnippet

snippet strrev "反转字符串"
strrev(${1:string})
endsnippet

snippet str_word_count "计算字符串中的单词数"
str_word_count(${1:string})
endsnippet

snippet strlen "返回字符串的长度"
strlen(${1:string})
endsnippet

# ------------------------------------------------------
snippet strcasecmp "比较两个字符串,大小写不敏感"
strcasecmp(${1:string}, ${2:string})
endsnippet

snippet strcmp "比较两个字符串,大小写敏感"
strcmp(${1:string}, ${2:string})
endsnippet

snippet strstr "搜索字符串在另一字符串中的第一次出现,大小写敏感"
strstr(${1:string}, "${2:search}")
endsnippet
snippet stristr "搜索字符串在另一字符串中的第一次出现,大小写不敏感"
stristr(${1:string}, "${2:search}")
endsnippet

snippet strpos "查找字符串在另一字符串中第一次出现的位置（区分大小写）"
strpos(${1:string}, "${2:search}")
endsnippet
snippet stripos "查找字符串在另一字符串中第一次出现的位置（不区分大小写）"
stripos(${1:string}, "${2:search}")
endsnippet

snippet strrpos "查找字符串在另一字符串中最后一次出现的位置（区分大小写）"
strrpos(${1:string}, "${2:search}")
endsnippet
snippet strripos "查找字符串在另一字符串中最后一次出现的位置（不区分大小写）"
strripos(${1:string}, "${2:search}")
endsnippet

# ------------------------------------------------------
#                   数组array
# ------------------------------------------------------
snippet array_column "输入数组中某个单一列的值"
array_column(${1:array}, '${2:column_key}', '${3:index_key}' )
endsnippet

snippet array_combine "合并两个数组来创建一个新数组"
array_combine(${1:keys_array}, ${2:values_array})
endsnippet

snippet array_key_exists "检查某个数组中是否存在指定的键名"
array_key_exists( '${1:key}', ${2:array})
endsnippet

snippet array_keys "返回包含数组中所有键名的一个新数组"
# array_keys(array,value,strict)
array_keys(${1:array})
endsnippet

snippet array_values "返回一个包含给定数组中所有键值的数组，但不保留键名"
array_values(${1:array})
endsnippet

snippet array_pad "将指定数量的带有指定值的元素插入到数组中"
array_pad(${1:array}, ${2:size}, ${3:value})
endsnippet

snippet array_map "将用户自定义函数作用到数组中的每个值上返回新值"
array_map("${1:function}", ${2:arrays})
endsnippet

snippet array_merge "把一个或多个数组合并为一个数组,有数字键名不要使用"
array_merge(${1:arrays})
endsnippet

snippet array_pop "删除并返回数组中的最后一个元素"
array_pop(${1:array})
endsnippet

snippet array_push "向数组尾部添加一个或多个元素,返回新数组的长度"
array_push(${1:array}, ${2:values})
endsnippet

snippet array_replace "使用后面数组的值替换第一个数组的值"
array_replace(${1:array}, ${2:arrays})
endsnippet

snippet array_reverse "返回一个逆序的数组"
# array_reverse(array,preserve)
array_reverse(${1:array})
endsnippet

snippet array_search "搜索键值,返回键名"
array_search("${1:value}", ${2:array})
endsnippet

snippet in_array "搜索键值,返回真假"
in_array("${1:value}", ${2:array})
endsnippet

snippet array_shift "删除并返回数组中第一个元素"
array_shift(${1:array})
endsnippet
snippet array_unshift "向数组开头添加一个或多个元素,返回新数组的长度"
array_unshift(${1:array}, ${2:values )
endsnippet

snippet sort "数组排序(rsort, ksort, krsort, asort, arsort)"
sort(${1:array})
endsnippet

snippet compact "由变量名和它们的值组成数组"
compact("${1:var1}", "${2:var2}")
endsnippet

snippet count "计算元素个数"
count(${1})
endsnippet

snippet range "创建一个包含指定范围的元素的数组"
range(${1:low}, ${2:high}${3:, ${4:step}})
endsnippet

# ------------------------------------------------------
#                   时间日期time/date
# ------------------------------------------------------
snippet date "格式化本地日期和时间"
date("${1:Y-m-d H:i:s}", ${2:time()})
endsnippet

snippet time "返回当前时间的 Unix 时间戳"
time()
endsnippet

snippet localtime "以数值数组和关联数组的形式输出本地时间"
localtime(${1:time()})
endsnippet

snippet microtime "返回当前 Unix 时间戳的微秒数"
microtime(${1:TRUE})
endsnippet

snippet mktime "返回一个日期的 UNIX 时间戳"
mktime(hour, minute, second, month, day, year)
endsnippet

snippet strtotime "将英文文本日期时间解析为 Unix 时间戳"
strtotime("${1:time_desc}")
endsnippet

snippet date_default_timezone_set "设置默认时区"
# http://www.php.net/manual/zh/timezones.php
date_default_timezone_set("${1:time_zone}");
endsnippet

# ------------------------------------------------------
#                   目录Directory
# ------------------------------------------------------
snippet dir "返回 Directory 类的实例,可使用read, rewind, close"
dir("${1:directory}");
endsnippet

snippet getcwd "获取当前工作目录"
getcwd()
endsnippet

# ------------------------------------------------------
#                   文件系统Filesystem
# ------------------------------------------------------
snippet basename "返回路径中的文件名部分"
basename("${1:path}")
endsnippet

snippet dirname "返回路径中的目录部分"
dirname("${1:path}")
endsnippet

snippet realpath "返回绝对路径"
realpath("${1:path}")
endsnippet

snippet copy "拷贝文件"
copy("${1:source}", "${2:destination}");
endsnippet

snippet rename "重命名文件或目录"
rename("${1:oldname}", "${2:newname}");
endsnippet

snippet unlink "删除文件"
unlink("${1:filename}");
endsnippet

snippet file_exists "检查文件或目录是否存在"
file_exists("${1:path}");
endsnippet

snippet file_get_contents "把整个文件读入一个字符串中"
file_get_contents("${1:path}");
endsnippet

snippet file_put_contents "把一个字符串写入文件中"
file_put_contents("${1:file}", ${2:data}, ${3:mode}, ${4:FILE_APPEND});
endsnippet

snippet filesize "文件大小"
filesize("${1:file}")
endsnippet

snippet filetype "文件类型:fifo, char, dir, block, link, file, unknown"
filetype("${1:file}")
endsnippet

snippet is_dir "检查指定的文件是否是目录"
is_dir("${1:file}")
endsnippet

snippet is_file "检查指定的文件名是否是正常的文件"
is_file("${1:file}")
endsnippet

snippet is_writable "判断指定的文件是否可写"
is_writable("${1:file}")
endsnippet

snippet mkdir "创建目录"
mkdir("${1:path}", ${2:0777}, ${3:TRUE});
endsnippet

snippet parse_ini_file "解析一个ini配置文件"
parse_ini_file("${1:file}");
endsnippet

snippet stat "返回关于文件的信息"
stat("${1:file_point}");
endsnippet
